/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kp.cbs.editor.utils;

import java.util.function.Consumer;
import javax.swing.JPanel;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marc
 */
public class RequiredPanel extends JPanel
{
    private final RequiredTableModel model = new RequiredTableModel();
    
    private Consumer<String[]> callback;
    
    /**
     * Creates new form RequiredPanel
     */
    public RequiredPanel()
    {
        initComponents();
        init();
    }
    
    private void init()
    {
        updateButtonsState();
    }
    
    public final void setCallback(final Consumer<String[]> action)
    {
        this.callback = action;
    }
    
    public final void setRequiredIds(String[] ids)
    {
        model.clear();
        
        if(ids != null && ids.length > 0)
        {
            model.setIds(ids);
        }
        
        tab_required.repaint();
        updateButtonsState();
    }
    
    public final void clear()
    {
        var cellEditor = tab_required.getCellEditor();
        if(cellEditor != null)
        {
            cellEditor.cancelCellEditing();
        }
        model.clear();
        updateButtonsState();
    }
    
    public final String[] getRequiredIds()
    {
        return model.getAll();
    }
    
    public final void activate()
    {
        tab_required.setEnabled(true);
        b_add.setEnabled(true);
        updateButtonsState();
    }
    
    public final void deactivate()
    {
        var cellEditor = tab_required.getCellEditor();
        if(cellEditor != null)
            cellEditor.cancelCellEditing();
        tab_required.setEnabled(false);
        b_add.setEnabled(false);
        b_remove.setEnabled(false);
    }
    
    public final void deactivateAndRestart()
    {
        deactivate();
        clear();
    }
    
    private void createEmptyRequiredId()
    {
        model.addId("");
        tab_required.getCellEditor(model.getRowCount() - 1, 0).addCellEditorListener(new CellEditorListener()
        {
            @Override public final void editingStopped(ChangeEvent e) { executeCallback(); }
            @Override public final void editingCanceled(ChangeEvent e) {}
        });
        tab_required.repaint();
        updateButtonsState();
    }
    
    private void removeSelectedId()
    {
        var sel = tab_required.getSelectedRow();
        if(sel < 0)
            return;
        
        model.removeRow(sel);
        tab_required.repaint();
        updateButtonsState();
    }
    
    private void updateButtonsState()
    {
        boolean empty = model.isEmpty();
        b_remove.setEnabled(!empty);
    }
    
    private void executeCallback()
    {
        if(callback != null)
            callback.accept(model.getAll());
    }
    
    private final class RequiredTableModel extends DefaultTableModel
    {
        private RequiredTableModel()
        {
            super(new Object[][]{}, new String[]{ "Requeridos" });
        }
        
        private void addId(String id)
        {
            addRow(new Object[] { id });
        }
        
        private void setIds(String[] ids)
        {
            for(var id : ids)
                addRow(new Object[] { id });
        }
        
        private void clear()
        {
            dataVector.clear();
        }
        
        private String[] getAll()
        {
            return dataVector.stream().filter(vec -> !vec.isEmpty() && !vec.get(0).toString().isBlank())
                    .map(vec -> vec.get(0).toString())
                    .toArray(String[]::new);
        }
        
        private boolean isEmpty() { return dataVector.isEmpty(); }
        
        @Override
        public final Class getColumnClass(int columnIndex) { return String.class; }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tab_required = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        b_add = new javax.swing.JButton();
        b_remove = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        tab_required.setModel(this.model);
        tab_required.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tab_requiredFocusLost(evt);
            }
        });
        tab_required.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tab_requiredInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tab_required);
        if (tab_required.getColumnModel().getColumnCount() > 0) {
            tab_required.getColumnModel().getColumn(0).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 2.5;
        add(jScrollPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        b_add.setText("AÃ±adir");
        b_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_addActionPerformed(evt);
            }
        });
        jPanel1.add(b_add);

        b_remove.setText("Quitar");
        b_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_removeActionPerformed(evt);
            }
        });
        jPanel1.add(b_remove);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void b_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_addActionPerformed
        createEmptyRequiredId();
        executeCallback();
    }//GEN-LAST:event_b_addActionPerformed

    private void b_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_removeActionPerformed
        removeSelectedId();
        executeCallback();
    }//GEN-LAST:event_b_removeActionPerformed

    private void tab_requiredInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tab_requiredInputMethodTextChanged
        executeCallback();
    }//GEN-LAST:event_tab_requiredInputMethodTextChanged

    private void tab_requiredFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tab_requiredFocusLost
        executeCallback();
    }//GEN-LAST:event_tab_requiredFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_add;
    private javax.swing.JButton b_remove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tab_required;
    // End of variables declaration//GEN-END:variables
}
