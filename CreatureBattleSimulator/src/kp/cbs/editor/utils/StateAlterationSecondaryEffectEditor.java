/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kp.cbs.editor.utils;

import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import kp.cbs.creature.attack.effects.SecondaryEffect;
import kp.cbs.creature.attack.effects.StateAlterationSecondaryEffect;
import kp.cbs.editor.AttackEditor;
import kp.cbs.utils.Utils;

/**
 *
 * @author Asus
 */
public class StateAlterationSecondaryEffectEditor extends JDialog
{
    private final StateAlterationSecondaryEffect effect;
    
    public StateAlterationSecondaryEffectEditor(AttackEditor parent, StateAlterationSecondaryEffect effect)
    {
        super(parent, true);
        this.effect = Objects.requireNonNull(effect);
        initComponents();
        init();
    }
    
    private void init()
    {
        setResizable(false);
        Utils.focus(this);
        
        probability.setModel(new DefaultComboBoxModel<>(AttackEditor.generateIntegerRange(1, 100, 1)));
        
        
        confusion.setSelected(effect.isConfusion());
        paralysis.setSelected(effect.isParalysis());
        burn.setSelected(effect.isBurn());
        frozen.setSelected(effect.isFreezing());
        poisoning.setSelected(effect.isPoisoning());
        intoxication.setSelected(effect.isIntoxication());
        sleep.setSelected(effect.isSleep());
        sleepiness.setSelected(effect.isSleepinees());
        curse.setSelected(effect.isCurse());
        nightmare.setSelected(effect.isNightmare());
        
        intimidate.setSelected(effect.isIntimidated());
        resting.setSelected(effect.isResting());
        criticalHit.setSelected(effect.isCritical_hit());
        selfTarget.setSelected(effect.isSelfTargetEnabled());
        
        probability.setSelectedItem(effect.getProbability());
    }
    
    public static final void execute(AttackEditor parent, SecondaryEffect effect)
    {
        if(effect instanceof StateAlterationSecondaryEffect)
        {
            StateAlterationSecondaryEffectEditor editor = new StateAlterationSecondaryEffectEditor(parent, (StateAlterationSecondaryEffect) effect);
            editor.setVisible(true);
        }
    }
    
    private void store()
    {
        effect.setConfusion(confusion.isSelected());
        effect.setParalysis(paralysis.isSelected());
        effect.setBurn(burn.isSelected());
        effect.setFreezing(frozen.isSelected());
        effect.setPoisoning(poisoning.isSelected());
        effect.setIntoxication(intoxication.isSelected());
        effect.setSleep(sleep.isSelected());
        effect.setSleepinees(sleepiness.isSelected());
        effect.setCurse(curse.isSelected());
        effect.setNightmare(nightmare.isSelected());
        
        effect.setIntimidated(intimidate.isSelected());
        effect.setResting(resting.isSelected());
        effect.setCritical_hit(criticalHit.isSelected());
        effect.setSelfTargetEnabled(selfTarget.isSelected());
        
        effect.setProbability(value(probability));
    }
    
    @Override
    public void dispose()
    {
        store();
        super.dispose();
    }
    
    private static int value(JComboBox<Integer> box)
    {
        try { return ((Number) box.getSelectedItem()).intValue(); }
        catch(Throwable ex) { return 0; }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        confusion = new javax.swing.JCheckBox();
        paralysis = new javax.swing.JCheckBox();
        burn = new javax.swing.JCheckBox();
        frozen = new javax.swing.JCheckBox();
        poisoning = new javax.swing.JCheckBox();
        intoxication = new javax.swing.JCheckBox();
        sleep = new javax.swing.JCheckBox();
        sleepiness = new javax.swing.JCheckBox();
        curse = new javax.swing.JCheckBox();
        nightmare = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        intimidate = new javax.swing.JCheckBox();
        resting = new javax.swing.JCheckBox();
        criticalHit = new javax.swing.JCheckBox();
        selfTarget = new javax.swing.JCheckBox();
        probability = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Propiedades de Alteraciones y Problemas de estado");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Problemas de estado"));
        jPanel1.setLayout(new java.awt.GridLayout(5, 2));

        confusion.setText("Confusión");
        jPanel1.add(confusion);

        paralysis.setText("Parálisis");
        jPanel1.add(paralysis);

        burn.setText("Quemadura");
        jPanel1.add(burn);

        frozen.setText("Congelación");
        jPanel1.add(frozen);

        poisoning.setText("Envenenamiento");
        jPanel1.add(poisoning);

        intoxication.setText("Intoxicación");
        jPanel1.add(intoxication);

        sleep.setText("Sueño");
        jPanel1.add(sleep);

        sleepiness.setText("Somnoléncia");
        jPanel1.add(sleepiness);

        curse.setText("Maldición");
        jPanel1.add(curse);

        nightmare.setText("Pesadillas");
        jPanel1.add(nightmare);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Otros"));
        jPanel2.setToolTipText("");
        jPanel2.setLayout(new java.awt.GridBagLayout());

        intimidate.setText("Intimidar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(intimidate, gridBagConstraints);

        resting.setText("Descansar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(resting, gridBagConstraints);

        criticalHit.setText("Más Indice de Golpe Crítico");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(criticalHit, gridBagConstraints);

        selfTarget.setText("Apuntar al Usuario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(selfTarget, gridBagConstraints);

        probability.setBorder(javax.swing.BorderFactory.createTitledBorder("Probabilidad"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(probability, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox burn;
    private javax.swing.JCheckBox confusion;
    private javax.swing.JCheckBox criticalHit;
    private javax.swing.JCheckBox curse;
    private javax.swing.JCheckBox frozen;
    private javax.swing.JCheckBox intimidate;
    private javax.swing.JCheckBox intoxication;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox nightmare;
    private javax.swing.JCheckBox paralysis;
    private javax.swing.JCheckBox poisoning;
    private javax.swing.JComboBox<Integer> probability;
    private javax.swing.JCheckBox resting;
    private javax.swing.JCheckBox selfTarget;
    private javax.swing.JCheckBox sleep;
    private javax.swing.JCheckBox sleepiness;
    // End of variables declaration//GEN-END:variables
}
