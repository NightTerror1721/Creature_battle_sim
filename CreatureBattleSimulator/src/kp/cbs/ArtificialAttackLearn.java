/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kp.cbs;

import java.util.HashMap;
import java.util.Objects;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import kp.cbs.battle.LearnAttack;
import kp.cbs.creature.Creature;
import kp.cbs.creature.attack.AttackModel;
import kp.cbs.creature.attack.AttackPool;
import kp.cbs.creature.attack.AttackViewer;
import kp.cbs.creature.attack.RaceAttackPool.RaceAttack;
import kp.cbs.utils.SoundManager;
import kp.cbs.utils.Utils;

/**
 *
 * @author Marc
 */
public class ArtificialAttackLearn extends JDialog
{
    private final PlayerGame game;
    private final Creature creature;
    
    private ArtificialAttackLearn(CreatureSelector parent, PlayerGame game, Creature creature)
    {
        super(parent, true);
        this.game = Objects.requireNonNull(game);
        this.creature = Objects.requireNonNull(creature);
        initComponents();
        init();
    }
    
    public static final void open(CreatureSelector parent, PlayerGame game, Creature creature)
    {
        var learner = new ArtificialAttackLearn(parent, game, creature);
        learner.setVisible(true);
    }
    
    private void init()
    {
        setResizable(false);
        Utils.focus(this);
        
        name.setText(creature.getName());
        race.setText(creature.getRace().getName());
        
        atts.setModel(new DefaultListModel<>());
        
        updateAttacks();
        updateMoney();
        showAttack();
    }
    
    private void updateMoney()
    {
        money.setText(Integer.toString(game.getMoney()));
    }
    
    private void showAttack()
    {
        var sel = atts.getSelectedValue();
        if(sel == null)
        {
            price.setText("");
            
            price.setEnabled(false);
            see.setEnabled(false);
            learn.setEnabled(false);
        }
        else
        {
            price.setText(Integer.toString(sel.price));
            
            price.setEnabled(true);
            see.setEnabled(true);
            learn.setEnabled(game.getMoney() >= sel.price);
        }
    }
    
    private void updateAttacks()
    {
        var model = (DefaultListModel) atts.getModel();
        model.removeAllElements();
        
        final var all = new HashMap<AttackModel, AttackEntry>();
        creature.getRace().getAttackPool().streamRaceAttacksUntilLevel(creature.getLevel())
                .forEach((att) -> addAttack(all, att));
        
        all.values().forEach(model::addElement);
        
    }
    private void addAttack(HashMap<AttackModel, AttackEntry> all, RaceAttack att)
    {
        if(creature.getAttackManager().containsAttack(att.getAttackModel()))
            return;
        var pr = computePrice(att);
        if(all.containsKey(att.getAttackModel()))
        {
            var old = all.get(att.getAttackModel());
            if(old.price <= pr)
                return;
        }
        all.put(att.getAttackModel(), new AttackEntry(att.getAttackModel(), pr));
        
    }
    private int computePrice(RaceAttack att)
    {
        if(att.isInnate())
            return 1000;
        var value = 1000 + att.getLevel() * 40;
        return att.isHidden() ? value * 2 : value;
    }
    
    
    private static final class AttackEntry implements Comparable<AttackEntry>
    {
        private final AttackModel attack;
        private final int price;
        
        private AttackEntry(AttackModel model, int price)
        {
            this.attack = model;
            this.price = Math.max(1, price);
        }
        
        @Override
        public final String toString() { return attack.getName(); }

        @Override
        public final int compareTo(AttackEntry o)
        {
            return attack.getName().compareTo(o.attack.getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        atts = new javax.swing.JList<>();
        name = new javax.swing.JTextField();
        race = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        money = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        see = new javax.swing.JButton();
        learn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        atts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        atts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                attsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(atts);

        name.setEditable(false);
        name.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre"));

        race.setEditable(false);
        race.setBorder(javax.swing.BorderFactory.createTitledBorder("Raza"));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setLayout(new java.awt.GridLayout(4, 1));

        money.setEditable(false);
        money.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        money.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dinero", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.add(money);

        price.setEditable(false);
        price.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        price.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Precio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.add(price);

        see.setText("Ver Ataque");
        see.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeActionPerformed(evt);
            }
        });
        jPanel1.add(see);

        learn.setText("Aprender Ataque");
        learn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnActionPerformed(evt);
            }
        });
        jPanel1.add(learn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name)
                    .addComponent(race)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(race, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void attsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_attsValueChanged
        showAttack();
    }//GEN-LAST:event_attsValueChanged

    private void seeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeActionPerformed
        var sel = atts.getSelectedValue();
        if(sel == null)
            return;
        
        AttackViewer.open(this, AttackPool.createAttack(sel.attack));
    }//GEN-LAST:event_seeActionPerformed

    private void learnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnActionPerformed
        var sel = atts.getSelectedValue();
        if(sel == null)
            return;
        
        if(game.getMoney() < sel.price)
            return;
        
        var slot = creature.getAttackManager().getFirstEmptySlot();
        if(slot == null)
        {
            slot = LearnAttack.open(this, creature, sel.attack);
            if(slot == null)
                return;
        }
        creature.getAttackManager().setAttack(slot, sel.attack);
        game.useMoney(sel.price);
        updateMoney();
        SoundManager.playSound("level_up");
        JOptionPane.showMessageDialog(this,"¡" + creature.getName() + " ha aprendido el ataque " + sel.attack.getName() + "!");
        updateAttacks();
        
    }//GEN-LAST:event_learnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<AttackEntry> atts;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton learn;
    private javax.swing.JTextField money;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JTextField race;
    private javax.swing.JButton see;
    // End of variables declaration//GEN-END:variables
}
